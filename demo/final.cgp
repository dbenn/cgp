# A test of the final graphs. Reads a final graph file, asserts each 
# non type hierarchy related graph into pCG's top-level knowledge base,
# and projects a filter over all these graphs, returning matches and
# sending them to standard output.

# Use a June 2001 CG Standard conformant CGIF parser and generator.
# The current (0.2.2) Notio defaults are based upon an older version of 
# the standard.
option cgifparser = "cgp.translators.CGIFParser";
option cgifgen = "cgp.translators.CGIFGenerator";

# Get the file path separator for the current operating system.
sep = (_ENV.member("file.separator"))[2];

# Final file names.
graphFileNames = {"final_graphs_level1.cgf", "final_graphs_level2.cgf", 
                  "final_graphs_level3.cgf", "final_graphs_level4.cgf",
		  "final_graphs_level5.cgf"};

# Get optional graph number from command-line. Defaults to 2.
gNum = 2;
if _ARGS.length == 1 then gNum = (_ARGS[1]).toNumber(); end
if gNum > 5 or gNum < 1 then exit "Invalid file number."; end
graphFileName = graphFileNames[gNum];

# "2" can be changed to "1", "3", "4", or "5" here, to demonstrate that pCG
# can parse and display the graphs in all the final files, but the projection
# operation below is intended for use with the second final graph.
f = file ("final"+sep+graphFileName);

# Read and assert the graphs.
graphs = f.readGraphStream();
f.close();
println "*** Asserting graphs into KB...";
println "";
foreach g in graphs do
  rels = g.relations;
  if rels.member("GT") is undefined then
    println g;
    assert g;
  end
end

println "";

# Generate linear form as output rather than CGIF.
option LFout;

# Retrieve all graphs in the outer context containing an OnTable relation.
filter = `(OnTable [Entity] [Entity])`;
println "Result of projecting " + filter + " onto asserted graphs...";
println "";
foreach g in _KB.graphs do
  h = g.project(filter);
  if not (h is undefined) then
    println h;
  end
end
