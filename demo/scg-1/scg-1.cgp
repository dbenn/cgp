// An attempt at a solution to the Sisyphus-I room allocation problem
// using processes. It even works. Room allocations are shown against 
// the image on the Sisyphus-I problem description web page. In this
// version, all initial graphs pertaining to one person are joined into 
// a single graph for each person. This reduces the search space and a
// first cut at this shaved 2.5 seconds off the execution time. Both
// the first and second problem statements are solved by this solution.
//
// To do
// -----
// - Add a constraint which ensures that people on the same project aren't
//   allocated the same room even though the process works without such
//   a constraint. If the order of graphs in the KB were to change, this
//   could break. A change would be necessitated to allocateSecondResearcher.
//   For this to work, researcher room allocations will have to be asserted
//   locally as well as in the caller's KB. But even this is not enough!
//   To accomplish this it may be necessary to consider the precondition
//   graphs in a rule as a goal and to employ more complex search techniques
//   such as backtracking.
//
// - The call to findMatchingGraph() in mkErasureGraph() is only required
//   because all graphs are originally asserted with single-quoted referents 
//   but some graphs generated during the running of the process (e.g. from
//   projection operations in preconditions) have double-quoted string 
//   literals as referents. Instead, all graphs should be asserted in the 
//   latter form.
//
// Notes
// -----
// - Information not used (and possibly an indication of the brittleness of
//   my solution) are: project, hacker, and coworker relations. Although,
//   the coworker often doesn't correspond to project membership in the
//   information provided!
//
// - The final rule in the Sisyphus process shows type subsumption. See also
//   Room types below.
//
// - There is considerable discussion regarding this example in the author's
//   coursework Masters thesis: "An Implementation of Conceptual Graph 
//   Processes". Refer to http://www.adelaide.net.au/~dbenn/Masters/ for more.
// 
// David Benn, October-December 2000, June,July 2001

option CGIFparser = "cgp.translators.CGIFParser";
option CGIFgen = "cgp.translators.CGIFGenerator";

// ** Type Hierarchies **
concept Person;
concept Role;
concept Project;
concept Smoker;
concept Hacker;
concept Room > SingleRoom; // only this and the next are actually necessary
concept Room > LargeRoom;
concept Location;
concept Number > Integer; // gratuitous

relation Attr;
relation Chrc;
relation Member;
relation Coworker;
relation Vacancy;
relation Occupant;

// ** Actor Executor Functions **

// Currently unused, but see allocateFirstResearcher rule.
function NotSame(x,y,result)
  op1 = x.designator;
  op2 = y.designator;

  if not (op1 is string) or not (op2 is string) then
    exit me.name + " expects string concept designators.";
  end

  result.designator = not (op1 == op2);
end

// ** General Purpose Functions **

function addToMatchingPerson(addition)
  newConcepts = addition.concepts;
  foreach g in _KB.graphs do
    // Join 2 graphs at head if head concepts identical.
    gConcepts = g.concepts;
    if newConcepts[1] == gConcepts[1] then
      retract g; 
      assert g.joinAtHead(addition);
      return;
    end
  end
end

function findMatchingGraph(filter)
  foreach g in _KB.graphs do
    h = g.project(filter);
    if not (h is undefined) then
      return g;
    end    
  end        
end

function mkErasureGraph(g)
  return ("[ERASURE:" + findMatchingGraph(g) + "]").toGraph();
end

function getCorefVarValue(s)
  return s.substring(s.index("=")+2, s.length);
end

function getVarValue(key)
  foreach var in _KB.corefvars do
    if var.index(key) == 1 then
      return getCorefVarValue(var);
    end 
  end
end

function getRoomLabel()
  return getVarValue("*roomLabel");
end

function getRoomNumber(label)
  num = label.substring(label.index("-")+1, label.length);
  return num.toNumber();
end

function getPersonName()
  return getVarValue("*name");
end

function showAllocation(kind, name, label)
  println "--> " + kind + " '" + name + "' allocated to " + label;
end

function plotName(name, roomLabel, occupantNum, color) 
  roomNum = getRoomNumber(roomLabel);
  coord = roomXY[roomNum-112];
  x = coord[1]+5;
  y = coord[2] + 15*occupantNum;
  w.setColor(color);
  w.drawText(name, x, y);
end

// ** Processes **

process Sisyphus()
  initial
  end

  rule allocateHeadOfYQT
    pre
      action
	println "Need to allocate room for the head of YQT?";
      end

      `(Chrc [Person:'*name'] [Head:'YQT'])`;

      `(Chrc [LargeRoom:'*roomLabel'] [Location:'Central'])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Head of YQT", name, label);
	plotName(name, label, 1, headColor);
      end  

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // rule allocateHeadOfYQT

  rule allocateSecondSecretary
    // This rule *must* come before allocateFirstSecretary, otherwise
    // the latter will fire twice, yielding allocation into two
    // different large rooms.
    pre
      action
	println "Need to allocate room for second secretary?";
      end

      `(Chrc [Person:'*name'] [Role:'Secretary'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'Central'])
       (Vacancy ?a [Integer:+1])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Second secretary", name, label);
	plotName(name, label, 2, secretaryColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // allocateSecondSecretary

  rule allocateFirstSecretary
    pre
      action
	println "Need to allocate room for first secretary?";
      end

      `(Chrc [Person:'*name'] [Role:'Secretary'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'Central'])
       (Vacancy ?a [Integer:+2])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("First secretary", name, label);
	plotName(name, label, 1, secretaryColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person

      `[ERASURE:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'Central'])
                (Vacancy ?a [Integer:+2])]`;    

      `[PROPOSITION:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'Central'])
                    (Vacancy ?a [Integer:+1])]`;

    end
  end // allocateFirstSecretary

  rule allocateManager
    pre
      action
	println "Need to allocate room for the manager?";
      end

      `(Chrc [Person:'*name'] [Role:'Manager'])`;

      `(Chrc [SingleRoom*a:'*roomLabel'] [Location:'Central'])
       (Vacancy ?a [Integer:+1])
       (Attr ?a [Size:'Small'])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Manager", name, label);
	plotName(name, label, 1, managerColor);
      end  

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // rule allocateManager

  rule allocateAHead
    pre
      action
	println "Need to allocate room for a head?";
      end

      `(Chrc [Person:'*name'] [Head:'*someProject'])`;

      `(Chrc [SingleRoom*a:'*roomLabel'] [Location:'Central'])
       (Vacancy ?a [Integer:+1])
       (Attr ?a [Size:'Small'])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Head", name, label);
	plotName(name, label, 1, headColor);
      end  

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // rule allocateAHead

  rule allocateSecondResearcher
    // This rule *must* come before allocateFirstResearcher, otherwise
    // the latter will fire twice, yielding allocation into two
    // different large rooms, making the final 3 pairs of allocations
    // (see steps 8, 9, and 10 in the SCG-I documentation) impossible
    // without a smoker/non-smoker conflict. This ordering is somewhat
    // akin to a degenerate recursive step. The lesson here is that
    // the more constrained rule should appear first, not unlike
    // Prolog in that regard, I believe. In accordance with this, we
    // are allocating non-smoking researchers with this and the next
    // rule, followed by anyone else who is left and happens to smoke,
    // via the following two rules. This is a different ordering than
    // the one suggested by Siggi D. Wizard.
    pre
      action
	println "Need to allocate room for a second researcher?";
      end

      `(Chrc [Person*a:'*name'] [Role*b:'Researcher'])
       (Member ?a [Project:'*proj1'])
       (Chrc ?a [Smoker:'No'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
       (Vacancy ?a [Integer:+1])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Second researcher", name, label);
	plotName(name, label, 2, researcherColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // allocateSecondResearcher

  rule allocateFirstResearcher
    pre
      action
	println "Need to allocate room for a first researcher?";
      end

      `(Chrc [Person*a:'*name'] [Role:'Researcher'])
       (Chrc ?a [Smoker:'No'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
       (Vacancy ?a [Integer:+2])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("First researcher", name, label);
	plotName(name, label, 1, researcherColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person

      `[ERASURE:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
                (Vacancy ?a [Integer:+2])]`;    

      `[PROPOSITION:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
                    (Vacancy ?a [Integer:+1])]`;

    end
  end // allocateFirstResearcher

  rule allocateSecondSmoker
    // This rule *must* come before allocateFirstSmoker, otherwise
    // the latter will fire twice, yielding allocation into two
    // different large rooms. Here we're trying to pair off
    // smokers into large rooms. If we only have one smoker, we could
    // end up allocating him/her to a large room with a non-smoker. But
    // wait! We've already dealt with all the pair-wise non-smoking
    // allocations above, haven't we? Sure, but if we have an *odd*
    // number of non-smokers, we may have no choice but to allocate
    // smokers with non-smokers.
    pre
      action
	println "Need to allocate room for second smoker?";
      end

      `(Chrc [Person:'*name'] [Smoker:'Yes'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
       (Vacancy ?a [Integer:+1])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Second smoker", name, label);
	plotName(name, label, 2, smokerColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // allocateSecondSmoker

  rule allocateFirstSmoker
    pre
      action
	println "Need to allocate room for first smoker?";
      end

      `(Chrc [Person:'*name'] [Smoker:'Yes'])`;

      `(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
       (Vacancy ?a [Integer:+2])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("First smoker", name, label);
	plotName(name, label, 1, smokerColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      mkErasureGraph(_MATCHES[1]); // erase person

      `[ERASURE:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
                (Vacancy ?a [Integer:+2])]`;    

      `[PROPOSITION:(Chrc [LargeRoom*a:'*roomLabel'] [Location:'*somewhere'])
                    (Vacancy ?a [Integer:+1])]`;
    end
  end // allocateFirstSmoker

  rule allocateRemainingResearcher
    // This is a catch-all rule, designed to cope with the Second Problem
    // Statement. It simply says that any remaining researcher should be
    // allocated to *any* remaining room. There should be three rules:
    // two to handle a large room in the manner above, and one to handle
    // a single room. It just so happens that we know that there's only
    // one single small room remaining by the time we get to this rule. 
    pre
      action
	println "Need to allocate room for a remaining researcher?";
      end

      `(Chrc [Person:'*name'] [Role:'Researcher'])`;

      `(Chrc [Room:'*roomLabel'] [Location:'*somewhere'])`;
    end

    post
      action
    	label = getRoomLabel();
	name = getPersonName();
	showAllocation("Remaining researcher", name, label);
	plotName(name, label, 1, researcherColor);
      end

      `[PROPOSITION:(Occupant [Person:'*name'] [Room:'*roomLabel'])]`;
       option export;

      // Not really necessary, since the process will terminate on the
      // next cycle as no rooms will be left.
      mkErasureGraph(_MATCHES[1]); // erase person
      mkErasureGraph(_MATCHES[2]); // erase room
    end
  end // allocateRemainingResearcher
end
 
// ** Main Program **

// Text colours.
red = {255,0,0};
green = {0,255,0};
blue = {0,0,255};
aqua = {0,237,221};
violet = {255,33,237};

headColor = blue;
secretaryColor = green;
managerColor = aqua;
smokerColor = red;
researcherColor = violet;

// Room coordinates.
roomXY = {{0,290},	// C5-113
	  {55,300},	// C5-114
	  {110,320},	// C5-115
	  {160,340},	// C5-116
	  {210,290},	// C5-117
	  {0,0},	// C5-118 -- The Tower, so don't care
	  {310,130},	// C5-119
	  {330,0},	// C5-120
	  {250,0},	// C5-121
	  {170,0},	// C5-122
	  {90,0}};	// C5-123

// Open a window containing the Sisyphus-I rooms graphic.
// * Modify paths appropriately. *
u = new Util;
w = new Window;
w.open("Sisyphus-I Room Allocations", 50, 50, 450, 375);
w.drawImage("file:Image2.gif", 0,0);

// Wait long enough for image to load before proceeding.
u.sleep(2);

// Legend.
w.setColor(headColor);
w.drawText("Head", 10,10);
w.setColor(secretaryColor);
w.drawText("Secretary", 10,30);
w.setColor(managerColor);
w.drawText("Manager", 10,50);
w.setColor(smokerColor);
w.drawText("Smoker", 10,70);
w.setColor(researcherColor);
w.drawText("Researcher", 10,90);

// Which YQT member file?
if _ARGS.length == 1 then
  inFilePath = _ARGS[1];
end else
  inFilePath = "yqt.cgif";
end

// Read CGIF created from HTML description taken from web
// (URL: http://ksi.cpsc.ucalgary.ca/KAW/Sisyphus/Sisyphus1/)
// and assert graphs in top-level KB. The table of YQT members 
// and information pertaining to them is the source of the information.
println "Asserting YQT member graphs.";
yqt = file inFilePath;
lines = yqt.readall();
yqt.close();
g = ""; // really want to say "undefined" here
foreach line in lines do
  if line.length > 0 then
    if g is graph then 
      // Add to current person's graph.
      g = g.join(line.toGraph());
    end else 
      // New person.
      g = line.toGraph();
    end
  end else
    // Assert current person's graph.
    assert g;
    // "Reset" graph for next person.
    g = "";
  end
end

// Add YQT member characteristics from descriptive paragraph
// of (section 2.1.2) of above URL.
println "Asserting more information about certain YQT members.";
addToMatchingPerson(`(Chrc [Person:'Thomas D.'] [Head:'YQT'])`);
addToMatchingPerson(`(Chrc [Person:'Hans W.'] [Head:'BABYLON Product'])`);
addToMatchingPerson(`(Chrc [Person:'Joachim I.'] [Head:'Other'])`);
addToMatchingPerson(`(Chrc [Person:'Katharina N.'] [Head:'Other'])`);

// Room graphs asserted in the top-level KB, to be modified 
// in the process's local KB.
//
// These will be searched for, possibly vacancies modified, and 
// in most cases, retracted when a particular allocation sequence
// is completed.

rooms = { `(Chrc [LargeRoom*a:'C5-117'] [Location:'Central'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [LargeRoom*a:'C5-119'] [Location:'Central'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [LargeRoom*a:'C5-120'] [Location:'NonCentral'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [LargeRoom*a:'C5-121'] [Location:'NonCentral'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [LargeRoom*a:'C5-122'] [Location:'NonCentral'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [LargeRoom*a:'C5-123'] [Location:'NonCentral'])
           (Vacancy ?a [Integer:+2])`,
          `(Chrc [SingleRoom*a:'C5-113'] [Location:'Central'])
           (Vacancy ?a [Integer:+1])`,
          `(Chrc [SingleRoom*a:'C5-114'] [Location:'Central'])
           (Vacancy ?a [Integer:+1])`,
          `(Chrc [SingleRoom*a:'C5-115'] [Location:'Central'])
           (Vacancy ?a [Integer:+1])`,
          `(Chrc [SingleRoom*a:'C5-116'] [Location:'Central'])
           (Vacancy ?a [Integer:+1])` };

foreach room in rooms do
  assert room;
end

// Invoke a process to solve the Sisyphus-I room allocation problem
// The end result will be a new graph for each member indicating his/her 
// room allocation.

Sisyphus();

// Iterate over the KB projecting room fliter onto each graph, 
// displaying matches.
option LFout;
println "";
println "Room allocation graphs:";
filter = `(Occupant [Person:'*x'] [Room:'*y'])`;
foreach g in _KB.graphs do
  h = g.project(filter);
  if not (h is undefined) then
    println " " + h;
  end
end 

println "";
println "ctrl-c to exit";
