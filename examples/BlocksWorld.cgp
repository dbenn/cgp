// Blocks World processes.

// Concept and relation ypes.
concept Block > Cube;
concept Block > Pyramid;
concept Block > Sphere;
relation NextTo > LeftOf;
relation NextTo > RightOf;

// Function definitions.
function replace(target, oldStr, newStr)
  n = target.index(oldStr);

  if n != -1 then
    target = target.substring(1,n-1) + 
	     newStr + 
	     target.substring(n+oldStr.length, target.length);
  end

  return target;
end

// Process definitions.
process findPair(in blockPattern, out blockMatch)
  rule r1
    pre
      // blockPattern is the only precondition graph here.
    end

    post
      // blockMatch is only the postcondition graph here.
    end
  end // rule r1
end

process swapPair(in blockPattern)
  rule r1
    option export; // export to caller's KB

    pre
      // blockPattern is the only precondition graph here.
    end

    post
      action
	g = _MATCHES[1];
	gStr = g + "";
 	if gStr.index("LeftOf") != -1 then 
	  newGStr = replace(gStr, "LeftOf", "RightOf");  
	end else
	  newGStr = replace(gStr, "RightOf", "LeftOf"); 	  
	end
      end
        // Postconditions.
        ("[ERASURE:" + g + "]").toGraph();
	("[PROPOSITION:" + newGStr + "]").toGraph();
    end
  end // rule r1
end

// Assert some block relationships.
assert `[Cube:*a'A'][Pyramid:*b'B'](LeftOf?a?b)`;
assert `[Sphere:*a'C'][Cube:*b'A'](LeftOf?a?b)`;
assert `[Cube:*a'D'][Pyramid:*b'B'](RightOf?a?b)`;

println "";
println "** PROJECTIONS **";
h = `[Cube:*a'*x'][Block:*b'*y'](NextTo?a?b)`;
foreach g in _KB.graphs do
  p = g.project(h);
  println h + " projected onto " + g + " = " + p + "(" + _KB.corefvars +
")";
end

println "";
println "** FINDPAIR **";
println "Before process 'findPair' invoked. Graphs: " + _KB.graphs;

// Is there some block to the left of some pyramid?
// Using process as a query mechanism here, a means
// to project over whole KB declaratively.
x = findPair(concept `[CONDITION:[Cube:*a'*x'][Block:*b'*y'](NextTo?a?b)]`,
             concept `[PROPOSITION:[Cube:*a'*x']]`);
println "";
println "After process 'findPair' invoked. Graphs: " + _KB.graphs;

// Is there some block next to some other block?
// If so, swap them. Do this twice.
println "";
println "** SWAPPAIR ** ";
println "Before process 'swapPair' invoked. Graphs: " + _KB.graphs;
foreach n in {1,2} do
  x = swapPair(concept `[CONDITION:[Block:*a'*x'][Block:*b'*y'](NextTo?a?b)]`);
end
println "";
println "After process 'swapPair' invoked. Graphs: " + _KB.graphs;
