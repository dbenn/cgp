// Iterative factorial process.
//
// This is based upon the factorial process example in 
// Mineau's 1998 ICCS paper. The implementation is similar
// although not identical.
//
// This version uses different variable names to Mineau and
// sequentialises the rule numbers since not all of Mineau's
// are required, as shown by the other versions in this directory.
//
// This version also compiles with the June 2001 CG Standard for
// the CGTools Workshop of ICCS 2001.
//
// The C code from page 67 of [Mineau 1998]:
//
// L0: int fact(int n)
// L1: { int f;
// L2:   int i;
// L3:   f = 1;
// L4:   i = 2;
// L5:   while (i <= n)
// L6:   {  f = f * i
// L7:      i = i + 1;
// L8:   }
// L9:   return f; }

option cgifparser = "cgp.translators.CGIFParser";
option LFout;

// Types.
concept Number > Integer;
concept String > Identifier > Variable;

// Function definitions.
function LTorEq(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first <= second;
end

function Multiply(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first * second;
end

function Add(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first + second;
end

// The iterative factorial process definition.
process fact(in trigger, out result)
  // L0: int fact(int n)
  rule r1
    pre
      `(val [Variable:'#n'] [Integer:'*nValue'])`;
      `(to_do [Line:'#L0'])`;
    end

    post
      `[ERASURE:(to_do [Line:'#L0'])]`;
      `[PROPOSITION:(to_do [Line:'#L3'])]`; // lines 1 and 2 are ignored
    end
  end // rule r1

  // L3:   f = 1;
  rule r2
    pre
      `(to_do [Line:'#L3'])`;
    end

    post
      `[PROPOSITION:(val [Variable:'#f'][Integer: +1.0])]`;
      `[ERASURE:(to_do [Line:'#L3'])]`;
      `[PROPOSITION:(to_do [Line:'#L4'])]`;
    end
  end // rule r2

  // L4:   i = 2;
  rule r3
    pre
      `(to_do [Line:'#L4'])`;
    end

    post
      `[PROPOSITION:(val [Variable:'#i'][Integer: +2.0])]`;
      `[ERASURE:(to_do [Line:'#L4'])]`;
      `[PROPOSITION:(to_do [Line:'#L5'])]`;
    end
  end // rule r3

  // L5:   while (i <= n)		[true case]
  rule r4
    pre
      `(to_do [Line:'#L5'])`;

      `[Integer*a:'*iValue'][Variable*b:'#i']
       [Integer*c:'*nValue'][Variable*d:'#n']
       [Boolean*e:"true"]
	 (val?b?a)
         (val?d?c)
 	 <LTorEq?a?c|?e>`;
    end

    post
      `[ERASURE:(to_do [Line:'#L5'])]`;
      `[PROPOSITION:(to_do [Line:'#L6'])]`;
    end
  end // rule r4

  // L5:   while (i <= n)		[false case]
  rule r5
    pre
      `(to_do [Line:'#L5'])`;

      `[Integer*a:'*iValue'][Variable*b:'#i']
       [Integer*c:'*nValue'][Variable*d:'#n']
       [Boolean*e:"false"]
	 (val?b?a)
         (val?d?c)
 	 <LTorEq?a?c|?e>`;
    end

    post
      `[ERASURE:(to_do [Line:'#L5'])]`;
      `[PROPOSITION:(to_do [Line:'#L9'])]`; // exit the while loop
    end
  end // rule r5

  // L6:   {  f = f * i;
  rule r6
    pre
      `(to_do [Line:'#L6'])`;

      `[Integer*a:'*fValue'][Variable*b:'#f']
       [Integer*c:'*iValue'][Variable*d:'#i']
       [Integer*e:'*product']
         (val?b?a)
         (val?d?c)
         <Multiply?a?c|?e>`;
    end

    post
      `[ERASURE:(val [Variable:'#f'][Integer:'*fValue'])]`;
      `[PROPOSITION:(val [Variable:'#f'][Integer:'*product'])]`;
      `[ERASURE:(to_do [Line:'#L6'])]`;
      `[PROPOSITION:(to_do [Line:'#L7'])]`;
    end
  end // rule r6

  // L7:      i = i + 1;
  rule r7
    pre
      `(to_do [Line:'#L7'])`;

      `[Integer*a:'*iValue'][Variable*b:'#i']
       [Integer*c: +1]
       [Integer*d:'*sum']
         (val?b?a)
         <Add?a?c|?d>`;
    end

    post
      `[ERASURE:(val [Variable:'#i'][Integer:'*iValue'])]`;
      `[PROPOSITION:(val [Variable:'#i'][Integer:'*sum'])]`;
      `[ERASURE:(to_do [Line:'#L7'])]`;
      `[PROPOSITION:(to_do [Line:'#L5'])]`;
    end
  end // rule r7

  // L9:   return f; }
  rule r8
    pre
      `(to_do [Line:'#L9'])`;
      `(val [Variable:'#f'][Integer:'*result'])`;
    end

    post
      `[ERASURE:(to_do [Line:'#L9'])]`;
    end
  end // rule r8
end

// Graph representing the initial value for a variable n.
n = 7; // must be positive
varN = "(val [Variable: '#n'][Integer: +" + n + "])";
assert varN.toGraph();

// Construct process invocation graph.
s = "<fact [PROPOSITION: (to_do [Line:'#L0'])] | " + 
    "      [PROPOSITION: [Integer: '*result']]>";
g = s.toGraph();

println "Before process 'fact'. Graphs: " + _KB.graphs;
      
x = activate g;

println "After process 'fact'. Graphs: " + _KB.graphs;
