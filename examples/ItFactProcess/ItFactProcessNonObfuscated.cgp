// Iterative factorial process.
//
// This is based upon the factorial process example in 
// Mineau's 1998 ICCS paper. The implementation is similar
// although not identical.
//
// This version uses different variable names to Mineau and
// sequentialises the rule numbers since not all of Mineau's
// are required, as shown by the other versions in this directory.
//
// The C code from page 67 of [Mineau 1998]:
//
// L0: int fact(int n)
// L1: { int f;
// L2:   int i;
// L3:   f = 1;
// L4:   i = 2;
// L5:   while (i <= n)
// L6:   {  f = f * i
// L7:      i = i + 1;
// L8:   }
// L9:   return f; }

// Types.
concept Number > Integer;
concept String > Identifier > Variable;

// Function definitions.
function LTorEq(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first <= second;
end

function Multiply(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first * second;
end

function Add(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first + second;
end

// The iterative factorial process definition.
process fact(in trigger, out result)
  // L0: int fact(int n)
  rule r1
    pre
      `[Integer:*a'*nValue'][Variable:*b'#n'](val?b?a)`;
      `[Line:*a'#L0'](to_do?a)`;
    end

    post
      `[ERASURE:[Line:*a'#L0'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L3'](to_do?a)]`; // lines 1 and 2 are ignored
    end
  end // rule r1

  // L3:   f = 1;
  rule r2
    pre
      `[Line:*a'#L3'](to_do?a)`;
    end

    post
      `[PROPOSITION:[Integer:*a 1][Variable:*b'#f'](val?b?a)]`;
      `[ERASURE:[Line:*a'#L3'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L4'](to_do?a)]`;
    end
  end // rule r2

  // L4:   i = 2;
  rule r3
    pre
      `[Line:*a'#L4'](to_do?a)`;
    end

    post
      `[PROPOSITION:[Integer:*a 2][Variable:*b'#i'](val?b?a)]`;
      `[ERASURE:[Line:*a'#L4'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L5'](to_do?a)]`;
    end
  end // rule r3

  // L5:   while (i <= n)		[true case]
  rule r4
    pre
      `[Line:*a'#L5'](to_do?a)`;

      `[Integer:*a'*iValue'][Variable:*b'#i']
       [Integer:*c'*nValue'][Variable:*d'#n']
       [Boolean:*e"true"]
	 (val?b?a)
         (val?d?c)
 	 <LTorEq?a?c|?e>`;
    end

    post
      `[ERASURE:[Line:*a'#L5'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L6'](to_do?a)]`;
    end
  end // rule r4

  // L5:   while (i <= n)		[false case]
  rule r5
    pre
      `[Line:*a'#L5'](to_do?a)`;

      `[Integer:*a'*iValue'][Variable:*b'#i']
       [Integer:*c'*nValue'][Variable:*d'#n']
       [Boolean:*e"false"]
	 (val?b?a)
         (val?d?c)
 	 <LTorEq?a?c|?e>`;
    end

    post
      `[ERASURE:[Line:*a'#L5'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L9'](to_do?a)]`; // exit the while loop
    end
  end // rule r5

  // L6:   {  f = f * i;
  rule r6
    pre
      `[Line:*a'#L6'](to_do?a)`;

      `[Integer:*a'*fValue'][Variable:*b'#f']
       [Integer:*c'*iValue'][Variable:*d'#i']
       [Integer:*e'*product']
         (val?b?a)
         (val?d?c)
         <Multiply?a?c|?e>`;
    end

    post
      `[ERASURE:[Integer:*a'*fValue'][Variable:*b'#f'](val?b?a)]`;
      `[PROPOSITION:[Integer:*a'*product'][Variable:*b'#f'](val?b?a)]`;
      `[ERASURE:[Line:*a'#L6'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L7'](to_do?a)]`;
    end
  end // rule r6

  // L7:      i = i + 1;
  rule r7
    pre
      `[Line:*a'#L7'](to_do?a)`;

      `[Integer:*a'*iValue'][Variable:*b'#i']
       [Integer:*c 1]
       [Integer:*d'*sum']
         (val?b?a)
         <Add?a?c|?d>`;
    end

    post
      `[ERASURE:[Integer:*a'*iValue'][Variable:*b'#i'](val?b?a)]`;
      `[PROPOSITION:[Integer:*a'*sum'][Variable:*b'#i'](val?b?a)]`;
      `[ERASURE:[Line:*a'#L7'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'#L5'](to_do?a)]`;
    end
  end // rule r7

  // L9:   return f; }
  rule r8
    pre
      `[Line:*a'#L9'](to_do?a)`;
      `[Integer:*a'*result'][Variable:*b'#f'](val?b?a)`;
    end

    post
      `[ERASURE:[Line:*a'#L9'](to_do?a)]`;
    end
  end // rule r8
end

// Graph representing the initial value for a variable n.
n = 7;
varN = "[Integer:*a " + n + "][Variable:*b'#n'](val?b?a)";
assert varN.toGraph();

// Construct process invocation graph.
s = "[PROPOSITION:*a[Line:*b'#L0'](to_do?b)]" + 
    "[PROPOSITION:*c[Integer:*d'*result']]" +
    "<fact?a|?c>";
g = s.toGraph();

println "Before process 'fact'. Graphs: " + _KB.graphs;
      
x = activate g;

println "After process 'fact'. Graphs: " + _KB.graphs;
