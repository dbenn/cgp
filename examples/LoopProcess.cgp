// Implementation of my thesis proposal process example of a trivial
// algorithm: a while loop.
//
// L0:	int n = 1;
// L1:	while n <= 2
// L2:      n = n + 1

// Types.
concept Number > Integer;

// Actor primitive definitions.
function LTorEq(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "The first 2 arguments to " + me.name + " must be numbers.";
  end
  result.designator = first <= second;
end

function Add(a,b,result)
  first = a.designator;
  second = b.designator;
  if not (first is number) or not (second is number) then
    exit "All arguments to " + me.name + " must be numbers.";
  end
  result.designator = first + second;
end

// Process definition.
process loop(in startLine, out negatedOrig, out endPoint)
  rule r0
    pre
      action
	//println "Entering Rule 0. Graphs: " + _KB.graphs;
      end
      
      `[Variable:*a'n'][Integer:*b'*z'](value?a?b)`;
      `[Line:*a'L0'](to_do?a)`;
    end

    post
      action
	//println "";
        //println "** Rule 0 matched. Coref vars: " + _KB.corefvars;
      end

      `[ERASURE:[Line:*a'L0'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'L1'](to_do?a)]`;
    end
  end // rule r0

  rule r1a
    pre
      action
	//println "Entering Rule 1a. Graphs: " + _KB.graphs;
      end
      
      `[Line:*a'L1'](to_do?a)`;
      `[Variable:*a'n'][Integer:*b'*x'][Integer:*c 2][Boolean:*d"true"]
         (value?a?b)<LTorEq?b?c|?d>`;
    end

    post
      action
	//println "";
        //println "** Rule 1a matched. Coref vars: " + _KB.corefvars;
      end

      `[ERASURE:[Line:*a'L1'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'L2'](to_do?a)]`;
    end
  end // rule r1a

  rule r1b
    pre
      action
	//println "Entering Rule 1b. Graphs: " + _KB.graphs;
      end
      
      `[Line:*a'L1'](to_do?a)`;
      `[Variable:*a'n'][Integer:*b'*x'][Integer:*c 2][Boolean:*d"false"]
         (value?a?b)<LTorEq?b?c|?d>`;
    end

    post
      action
	//println "";
        //println "** Rule 1b matched. Coref vars: " + _KB.corefvars;
      end

      `[ERASURE:[Line:*a'L1'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'L3'](to_do?a)]`;
    end
  end // rule r1b

  rule r2
    pre
      action
	//println "Entering Rule 2. Graphs: " + _KB.graphs;
      end
      
      `[Line:*a'L2'](to_do?a)`;
      `[Variable:*a'n'][Integer:*b'*x'][Integer:*c 1][Integer:*d'*y']
         (value?a?b)<Add?b?c|?d>`;
    end

    post
      action
	//println "";
        //println "** Rule 2 matched. Coref vars: " + _KB.corefvars;
      end

      `[ERASURE:[Variable:*a'n'][Integer:*b'*x'](value?a?b)]`;
      `[PROPOSITION:[Variable:*a'n'][Integer:*b'*y'](value?a?b)]`;
      `[ERASURE:[Line:*a'L2'](to_do?a)]`;
      `[PROPOSITION:[Line:*a'L1'](to_do?a)]`;
    end
  end // rule r2

  rule r3
    pre
      action
	//println "Entering Rule 3. Graphs: " + _KB.graphs;
      end
      
      `[Line:*a'L3'](to_do?a)`;
    end

    post
      action
	//println "";
        //println "** Rule 3 matched. Coref vars: " + _KB.corefvars;
      end

      `[ERASURE:[Line:*a'L3'](to_do?a)]`;
    end
  end // rule r3
end

// Main program.
assert `[Variable:*a'n'][Integer:*b 1](value?a?b)`;
println "Before process 'loop'. Graphs: " + _KB.graphs;
x = activate `[PROPOSITION:*a[Line:*b'L0'](to_do?b)]
              [ERASURE:*c[Variable:*d'n'][Integer:*e 1](value?d?e)]
              [PROPOSITION:*f[Variable:*g'n'][Integer:*h'*y'](value?g?h)]
	        <loop?a?c|?f>`;
println "After process 'loop'. Graphs: " + _KB.graphs;
