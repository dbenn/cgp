# pCG supports anonymous recursive functions, but not on purpose!
#
# The special local "me" variable makes this possible by referring
# to a function. This was originally intended for obtaining the name
# of a function for error messages etc, making it possible to always
# refer to me.name for similar error messages.
#
# Do other programming languages support this? The search string
# "anonymous recursive" on www.google.com gave at least 3, e.g. Joy,
# and R, although none seemed so simple as pCG's "me" variable,
# e.g. system.function().

# A regular function application.
function fact(n)
  if n < 1 then
    return 1;
  end else
    return n*fact(n-1);
  end
end

println apply fact {7};

# The same thing but with self-reference.
println apply function (n)
                if n < 1 then
                  return 1;
                end else
                  return n*me(n-1);
                end
              end       {7};

# Or, map this anonymous function onto a list.
function map(f, lists)
  if lists.length != f.argcount then
    exit f.name + " requires " + f.argcount + " arguments.";
  end
  foreach thing in lists do
    if not (thing is list) then
      exit "the second argument to " + me.name + " must be a list of lists.";
    end
  end
  len = (lists[1]).length;
  foreach L in lists do
    if L.length != len then
      exit "all lists passed to " + me.name + " must be of the same length.";
    end
  end
  results = {};
  n = 1;
  while n <= len do
    args = {};
    foreach L in lists do
      args.append(L[n]);
    end
    results.append(apply f args);
    n = n+1;
  end
  return results;
end

println map(function (n)
                if n < 1 then
                  return 1;
                end else
                  return n*me(n-1);
                end
              end,

            {{0,1,2,3,4,5,6,7,8,9}});
