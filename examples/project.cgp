// Projection operation tests.

relation Attr > Value;
concept Number > Real;

target = `[Var:*a'n'][Real:*b 2][Number:*c 4](Value?a?b)(Eq?b?c)(Ne?b?c)`;
filter = `[Var:*a'n'][Number:*b'*x'][Number:*c'*y'][Number:*d 0][Boolean:*e'true']<GT?b?d|?e>(Attr?a?b)(Eq?b?c)(Ne?b?c)`;

println "projection: " + target.project(filter);
println "";
println "filter: " + filter;
println "";
println "target: " + target;
println "";
println "Referent variable mappings: " + _KB.corefvars;

//-----------

// Try activating an actor after a projection to see whether referent
// variables will be bound. The above code has mapped *x which is required
// by the actor below. Also, the variable *y has a value after the above,
// so this should also be bound when trying to assert and retract the graph.

println "";

function mul(a,b,c)
  c.designator = a.designator * b.designator;
end

actor refVarTest(n) is `[Number:*a'*n'][Number:*b'*x'][Number:*c][Number:'*y']<mul?a?b|?c>`;

g = refVarTest(3);
println "Result of actor is: " + g;

assert g;
println "** Graphs after assertion: " + _KB.graphs;
println "Result of actor is still: " + g;

retract g;
println "** Graphs after retraction: " + _KB.graphs;
println "Result of actor is still: " + g;
